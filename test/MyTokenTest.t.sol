//SPDX-License-Identifier: MIT
pragma solidity ^0.8.18;

import {Test, console} from "lib/forge-std/src/Test.sol";
import {MyToken} from "src/MyToken.sol";
import {DeployMyToken} from "../script/DeployMyToken.s.sol";

contract MyTokenTest is Test {
    MyToken public myToken;
    DeployMyToken public deployer;

    address bob = makeAddr("bob");
    address alice = makeAddr("alice");

    uint256 public constant STARTING_BALANCE = 100 ether;

    function setUp() public {
        deployer = new DeployMyToken();
        myToken = deployer.run();

        vm.prank(address(msg.sender));
        myToken.transfer(bob, STARTING_BALANCE);
    }

    function testBobBalance() public {
        assertEq(myToken.balanceOf(bob), STARTING_BALANCE);
    }

    function testAllowancesWorks() public {
        //ERC20s have this function called transferFrom.
        //You have to approve an address to spend your tokens
        uint256 initialAllowance = 1000;

        //Bob approves Alice to spend tokens on her behalf
        vm.prank(address(bob));
        myToken.approve(alice, initialAllowance);

        uint256 transferAmount = 50;

        vm.prank(address(alice));
        myToken.transferFrom(bob, alice, transferAmount);

        assertEq(myToken.balanceOf(bob), STARTING_BALANCE - transferAmount);
        assertEq(myToken.balanceOf(alice), transferAmount);
    }

    //generated by AI
    function testTransfers() public {
        uint256 amount = 100;
        address recipient = address(0x123);
        uint256 initialBalance = myToken.balanceOf(msg.sender);

        vm.prank(msg.sender);
        myToken.transfer(recipient, amount);

        assertEq(myToken.balanceOf(recipient), amount);
        assertEq(myToken.balanceOf(msg.sender), initialBalance - amount);
    }

    //generated by AI
    //True only if we do not send anything to anybody in the setup
    /*function testBalanceOf() public {
        uint256 initialSupply = deployer.INITIAL_SUPPLY();
        console.log("initialSupply", initialSupply);
        console.log("balanceOf", myToken.balanceOf(address(myToken)));
        assertEq(myToken.balanceOf(msg.sender), initialSupply);
    }*/
}
